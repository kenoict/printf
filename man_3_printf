.TH _PRINTF 3  2021-10-05 "Holberton" "Linux Programmer's Manual"
.SH NAME
_printf
.SH SYNOPSIS
.nf
.B #include <main.h>
.PP
.BI "int _printf(const char *" format ", ...);"
.RE
.ad
.PD
.SH DESCRIPTION
The function 
.BR _printf ()
produces output according to a
.I format
as described below.
The function writes output to
.IR stdout,
the standard output stream.
.PP
_printf writes the output via a
.I format
string which uses special characters to instruct how subsequent arguments (or arguments accessed via
the variable-length argument facilities of
.BR stdarg (3))
are converted for output.
.SS Format of the format string
The format string is a character string composed of zero or more directives: 
ordinary characters (not
.BR % ),
which are copied unchanged to the output stream,
.I printf("This is an example"),
and conversion specifications, each of which results in fetching zero or more subsequent arguments. After the format string ends (via closing double quotes), a coma is placed to separate the format string and each subsequent argument.
Each conversion specification is introduced by the character
.BR % ,
and ends with a
.IR "conversion specifier". Here is an example:
.I printf("Print an integer: %i", 9) 
Notice how the integer value is separated by a coma. You may also use variables in place of literal values as well.
To print a literal 
.I %
, simply print:
.I %%
.
.PP
The arguments must correspond properly (after type promotion) with the
conversion specifier.
By default, the arguments are used in the order
given, and each conversion specifier asks for the next
argument. If _printf is given a NULL string, the function prints:
.I (null)
 in place of the string. If _printf is given a NULL integer argument, 
 .I 0 
 is printed.
.SS Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.TP
.BR d ", " i
The
.I int
argument is printed.
.TP
.BR c
The
.I char
argument is printed.
.TP
.BR s
The
.I string
argument is printed.
.SH RETURN VALUE
Upon successful return, this function returns the number of characters
printed (excluding the null byte used to end output to strings). Upon error, this funtion returns
.I -1
. If the format string is NULL, or if a % is only followed by a null byte or space character, _printf returns an error.
.SH NOTES
Conversion specifiers for many other arguments and types will be implemented over the course of _printf's development at Holberton.
.SH BUGS
Upon printing a conversion specifier after a previous
.I % 
which was followed by space(s), the function stops printing and returns an error.
.SH EXAMPLES
.TP
To print an integer: 
_printf("%d is an integer", 9);
.TP
To print a string:
_printf("My dog is a %s boy!", "good");
.TP
To print a character:
_printf("Dog begins with %c", 'D');
.TP
To print an integer variable:
_printf("%i is an int", x);